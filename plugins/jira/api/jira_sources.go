package api

import (
	"fmt"
	"strconv"

	"github.com/go-playground/validator/v10"
	lakeModels "github.com/merico-dev/lake/models"
	"github.com/merico-dev/lake/plugins/core"
	"github.com/merico-dev/lake/plugins/jira/models"
	"github.com/mitchellh/mapstructure"
)

func findSourceByInputParam(input *core.ApiResourceInput) (*models.JiraSource, error) {
	sourceId := input.Params["sourceId"]
	if sourceId == "" {
		return nil, fmt.Errorf("missing sourceid")
	}
	jiraSourceId, err := strconv.ParseUint(sourceId, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid sourceId")
	}
	jiraSource := &models.JiraSource{}
	err = lakeModels.Db.First(jiraSource, jiraSourceId).Error
	if err != nil {
		return nil, err
	}
	return jiraSource, nil
}

func syncSourceFromInput(jiraSource *models.JiraSource, input *core.ApiResourceInput) error {
	// decode
	err := mapstructure.Decode(input.Body, jiraSource)
	if err != nil {
		return err
	}

	// validate
	vld := validator.New()
	err = vld.Struct(jiraSource)
	if err != nil {
		return err
	}

	return nil
}

/*
POST /plugins/jira/sources
{
	"name": "jira data source name",
	"endpoint": "jira api endpoint, i.e. https://merico.atlassian.net/rest",
	"basicAuthEncoded": "generated by `echo -n <jira login email>:<jira token> | base64`",
	"epicKeyField": "name of customfield of epic key",
	"storyPointField": "name of customfield of story point",
	"storyPointCoefficient": 1   // help converting user storypoint to stand storypoint
}
*/
func PostSources(input *core.ApiResourceInput) (*core.ApiResourceOutput, error) {
	// read
	jiraSource := &models.JiraSource{}
	err := syncSourceFromInput(jiraSource, input)
	if err != nil {
		return nil, err
	}

	// save
	err = lakeModels.Db.Create(jiraSource).Error
	if err != nil {
		if lakeModels.IsDuplicateError(err) {
			return nil, fmt.Errorf("jira source with name %s already exists", jiraSource.Name)
		}
		return nil, err
	}
	return &core.ApiResourceOutput{Body: jiraSource}, nil
}

/*
PUT /plugins/jira/sources/:sourceId
{
	"name": "jira data source name",
	"endpoint": "jira api endpoint, i.e. https://merico.atlassian.net/rest",
	"basicAuthEncoded": "generated by `echo -n <jira login email>:<jira token> | base64`",
	"epicKeyField": "name of customfield of epic key",
	"storyPointField": "name of customfield of story point",
	"storyPointCoefficient": 1   // help converting user storypoint to stand storypoint
}
*/
func PutSource(input *core.ApiResourceInput) (*core.ApiResourceOutput, error) {
	// load from db
	jiraSource, err := findSourceByInputParam(input)
	if err != nil {
		return nil, err
	}

	// update with request body
	err = syncSourceFromInput(jiraSource, input)
	if err != nil {
		return nil, err
	}

	// save
	err = lakeModels.Db.Save(jiraSource).Error
	if err != nil {
		if lakeModels.IsDuplicateError(err) {
			return nil, fmt.Errorf("jira source with name %s already exists", jiraSource.Name)
		}
		return nil, err
	}
	return &core.ApiResourceOutput{Body: jiraSource}, nil
}

/*
DELETE /plugins/jira/sources/:sourceId
*/
func DeleteSource(input *core.ApiResourceInput) (*core.ApiResourceOutput, error) {
	// load from db
	jiraSource, err := findSourceByInputParam(input)
	if err != nil {
		return nil, err
	}
	err = lakeModels.Db.Delete(jiraSource).Error
	if err != nil {
		return nil, err
	}
	// cascading delete
	err = lakeModels.Db.Where("jira_source_id = ?", jiraSource.ID).Delete(&models.JiraIssueTypeMapping{}).Error
	if err != nil {
		return nil, err
	}
	err = lakeModels.Db.Where("jira_source_id = ?", jiraSource.ID).Delete(&models.JiraIssueStatusMapping{}).Error
	if err != nil {
		return nil, err
	}

	return &core.ApiResourceOutput{Body: jiraSource}, nil
}

/*
GET /plugins/jira/sources
*/
func ListSources(input *core.ApiResourceInput) (*core.ApiResourceOutput, error) {
	jiraSources := make([]models.JiraSource, 0)
	err := lakeModels.Db.Find(&jiraSources).Error
	if err != nil {
		return nil, err
	}
	return &core.ApiResourceOutput{Body: jiraSources}, nil
}
